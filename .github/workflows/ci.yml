name: CI - Build e Deploy de Apps Afetadas

# Dispara o workflow em pushes para a branch 'main'
on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Faz o checkout do c√≥digo
      # fetch-depth: 0 √© CRUCIAL para que o NX possa comparar com a branch base
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Configura o ambiente Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a vers√£o do Node do seu projeto
          cache: 'npm' # Ou 'yarn', 'pnpm'

      # 3. Instala as depend√™ncias do monorepo
      - name: Install Dependencies
        run: npm ci

      # 4. O passo m√°gico do NX: determina quais projetos foram afetados
      # A action oficial 'nx/setup-nx' simplifica tudo, especialmente o cache
      # e a obten√ß√£o da lista de projetos afetados.
      - name: Setup Nx
        uses: nx/setup-nx@v4
        id: nx # Damos um ID a este passo para referenciar seu output depois

      # 5. Executa o build apenas para os projetos afetados
      - name: Build Affected Projects
        run: npx nx affected -t build --parallel

      # 6. Faz o deploy da API (APENAS SE ELA FOI AFETADA)
      - name: Deploy API
        # A condi√ß√£o 'if' verifica se 'api' est√° na lista de projetos afetados
        # que a action 'nx/setup-nx' gerou para n√≥s.
        if: contains(steps.nx.outputs.affected_projects, 'api')
        run: |
          echo "üöÄ Deploying API..."
          # Aqui vai o seu script ou comando de deploy para a API
          # Ex: ./scripts/deploy-api.sh

      # 7. Faz o deploy da Web (APENAS SE ELA FOI AFETADA)
      - name: Deploy Web
        if: contains(steps.nx.outputs.affected_projects, 'web')
        run: |
          echo "üöÄ Deploying Web App..."
          # Aqui vai o seu script ou comando de deploy para a aplica√ß√£o web
